import sqlite3
import time

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('banking_system.db')
cursor = conn.cursor()

# Create tables if they do not exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT UNIQUE,
        password TEXT,
        balance REAL DEFAULT 0
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        transaction_type TEXT,
        amount REAL,
        timestamp TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
''')

conn.commit()

# Function to create a new user account
def create_account(username, password):
    try:
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        conn.commit()
        print("Account created successfully!")
    except sqlite3.IntegrityError:
        print("Username already exists.")
        
# Function to verify login credentials
def login(username, password):
    cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
    user = cursor.fetchone()
    if user:
        print(f"Welcome back, {username}!")
        return user[0]  # Return user ID
    else:
        print("Invalid username or password.")
        return None

# Function to deposit money into the account
def deposit(user_id, amount):
    cursor.execute('SELECT balance FROM users WHERE id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    
    if amount <= 0:
        print("Deposit amount must be greater than 0.")
        return
    
    new_balance = balance + amount
    cursor.execute('UPDATE users SET balance = ? WHERE id = ?', (new_balance, user_id))
    cursor.execute('INSERT INTO transactions (user_id, transaction_type, amount, timestamp) VALUES (?, ?, ?, ?)', 
                   (user_id, 'deposit', amount, time.strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    print(f"Deposited {amount}. New balance: {new_balance}")

# Function to withdraw money from the account
def withdraw(user_id, amount):
    cursor.execute('SELECT balance FROM users WHERE id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    
    if amount <= 0:
        print("Withdrawal amount must be greater than 0.")
        return
    
    if balance < amount:
        print("Insufficient funds.")
        return
    
    new_balance = balance - amount
    cursor.execute('UPDATE users SET balance = ? WHERE id = ?', (new_balance, user_id))
    cursor.execute('INSERT INTO transactions (user_id, transaction_type, amount, timestamp) VALUES (?, ?, ?, ?)', 
                   (user_id, 'withdraw', amount, time.strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    print(f"Withdrew {amount}. New balance: {new_balance}")

# Function to view transaction history
def view_transactions(user_id):
    cursor.execute('SELECT * FROM transactions WHERE user_id = ? ORDER BY timestamp DESC', (user_id,))
    transactions = cursor.fetchall()
    
    if transactions:
        print("Transaction History:")
        for txn in transactions:
            print(f"{txn[4]} - {txn[2]}: {txn[3]}")
    else:
        print("No transactions found.")

# Main function to run the banking system
def banking_system():
    print("Welcome to the Banking System")
    while True:
        print("\n1. Create Account")
        print("2. Login")
        print("3. Exit")
        choice = input("Choose an option: ")
        
        if choice == '1':
            username = input("Enter username: ")
            password = input("Enter password: ")
            create_account(username, password)
        
        elif choice == '2':
            username = input("Enter username: ")
            password = input("Enter password: ")
            user_id = login(username, password)
            
            if user_id:
                while True:
                    print("\n1. Deposit")
                    print("2. Withdraw")
                    print("3. View Transactions")
                    print("4. Logout")
                    choice = input("Choose an option: ")
                    
                    if choice == '1':
                        amount = float(input("Enter amount to deposit: "))
                        deposit(user_id, amount)
                    
                    elif choice == '2':
                        amount = float(input("Enter amount to withdraw: "))
                        withdraw(user_id, amount)
                    
                    elif choice == '3':
                        view_transactions(user_id)
                    
                    elif choice == '4':
                        print("Logging out...")
                        break
                    
        elif choice == '3':
            print("Exiting Banking System...")
            break

# Run the banking system
if __name__ == "__main__":
    banking_system()

# Close the database connection when done
conn.close()
